import pandas as pd
import numpy as np
from datetime import datetime
from sqlalchemy import create_engine

engine=create_engine('')
query='SELECT * FROM NashvilleHousing'

nashville=pd.read_sql(query,engine)
#check uniqueid datatype
print(nashville['UniqueID'].dtypes)
#Checking for nullvalues in UniqueID
pd.isnull(nashville['UniqueID']).sum()
print(nashville['ParcelID'].dtype)
pd.isnull(nashville['ParcelID']).sum()
#propertycity and propertystreet from propertyaddress
nashville[['PropertyStreet','PropertyCity']]=nashville['PropertyAddress'].str.split(',',expand=True)

#drop propertyaddress
nashville.drop(columns=['PropertyAddress'],inplace=True)
  
#setting uniqueid as index
nashville.set_index('UniqueID',inplace=True)
  
nashville
  
#saleprice dtype and null
nashville['SalePrice'].dtype

#saleprice null
pd.isnull(nashville['SalePrice']).sum()
  
#saleprice threw error on parsing to numeric, saleprice contains regex
nashville[nashville['SalePrice'].str.contains(r'\D')]
  
#saleprice contains '$' and trailing space
nashville['SalePrice']=nashville['SalePrice'].str.replace('$','',regex=False).str.strip()
  
#convert saleprice to numeric
nashville['SalePrice']=pd.to_numeric(nashville['SalePrice'],errors='coerce')

#replace na with default 1900
nashville['YearBuilt']=nashville['YearBuilt'].fillna(1900)

#BuildingCondition categories
bins=[0,20,60,np.inf]
labels=['New','Moderate','Old']

nashville['BuildingCondition']=pd.cut(nashville['BuildingAge'],bins=bins,labels=labels,right=False)


